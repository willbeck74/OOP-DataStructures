import java.util.NoSuchElementException;public final class LinkedQueue<E> implements QueueInterface<E> {	//----------------------------------------------------- Inner Node Class	private class Node {		private E data;		private Node next;				private Node(E next) {			this(next, null);		}		private Node(E data, Node next) {			this.data = data;			this.next = next;		}	}	//----------------------------------------------------------------------	//====================================================================== Properties	private Node first;	private Node last;	private int size;		//====================================================================== Constructors	public LinkedQueue() {		first = null;		last = null;		size = 0;	}	//====================================================================== Methods	@Override	public boolean isEmpty() {		if(size == 0)			return true;		return false;	}		@Override	public void clear() {		if(!isEmpty()) {			for(int i = 0; i < size; i++) {				first.next = null;			}		}	}		@Override	public int size() {		return size;	}		@Override	public boolean add(E newEntry) {		Node node = new Node(newEntry);		if(isEmpty())			first = node;		else			last.next = node;		last = node;		size++;		return true;	}		// Returns null if empty	@Override	public E peek() {		return (isEmpty() ? null : first.data);	}		// Throws NoSuchElementException if empty	@Override	public E remove() {		if(isEmpty())			throw new NoSuchElementException();		else {		//E ret = first.data;		Node ret = first;		first = first.next;		size--;		return ret.data;		}	}		@Override	public String toString() {		String ret = "";		if(isEmpty())			return "[]";		Node temp = first;		while(temp != null) {			ret += temp.data;			temp = temp.next;			if(temp != null)				ret += ", ";		}		return "[" + ret + "]";	}		//----------------------------------------------- Personal Methods	public String showActualArray() {		return toString();	}	}